// Mengimpor fungsi yang diperlukan dari Firebase SDK dan readline untuk input terminal
const { initializeApp } = require("firebase/app");
const { getFirestore, collection, addDoc, getDocs, deleteDoc, doc, setDoc } = require("firebase/firestore");
const readline = require("readline"); // Modul untuk input terminal
require("dotenv").config(); // Memuat variabel lingkungan dari file .env

// Inisialisasi Firebase
const firebaseConfig = {
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID,
  measurementId: process.env.FIREBASE_MEASUREMENT_ID,
};

// Inisialisasi aplikasi Firebase dan Firestore
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Anda perlu menambahkan logika otentikasi untuk mendapatkan userId
// Ini bisa dilakukan melalui Firebase Authentication, atau bisa juga berupa ID statis untuk testing
const userId = "autogenerated-user-id"; // Ganti dengan logika yang sesuai untuk mendapatkan user ID

// Fungsi untuk menambahkan data ke Firestore
async function addDataToFirestore(vehicleId, data) {
  try {
    const docRef = doc(db, "users", userId, "vehicles", vehicleId);
    await setDoc(docRef, data); // Simpan data ke koleksi "users/{userId}/vehicles/{vehicleId}"
    console.log("Data berhasil ditambahkan:", data);
  } catch (error) {
    console.error("Gagal menambahkan data:", error);
  }
}

// Fungsi untuk mengambil dan menampilkan data dari Firestore
async function displayData() {
  try {
    const querySnapshot = await getDocs(collection(db, "emisi", userId, "vehicles"));
    console.log("Data yang ada di Firestore:");
    querySnapshot.forEach((doc) => {
      console.log(`${doc.id} =>`, doc.data());
    });
  } catch (error) {
    console.error("Gagal mengambil data:", error);
  }
}

// Fungsi untuk menghapus data dari Firestore
async function deleteDataFromFirestore(vehicleId) {
  try {
    await deleteDoc(doc(db, "emisi", userId, "vehicles", vehicleId)); // Menghapus dokumen berdasarkan ID
    console.log(`Data kendaraan dengan ID ${vehicleId} berhasil dihapus untuk pengguna ${userId}.`);
  } catch (error) {
    console.error("Gagal menghapus data:", error);
  }
}

// Fungsi untuk memulai input terminal
function promptUserInput() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  // Fungsi untuk mengajukan pertanyaan
  const askQuestion = (query) =>
    new Promise((resolve) => rl.question(query, resolve));

  // Fungsi untuk memulai program
  async function startProgram() {
    const initialChoice = await askQuestion(
      "Apakah Anda ingin melihat data yang ada (L), menulis data baru (N), atau menghapus data (D)? (L/N/D): "
    );

    if (initialChoice.toLowerCase() === 'l') {
      await displayData();
      rl.close();
    } else if (initialChoice.toLowerCase() === 'n') {
      inputLoop(rl);
    } else if (initialChoice.toLowerCase() === 'd') {
      const vehicleIdToDelete = await askQuestion("Masukkan ID kendaraan yang ingin dihapus: ");
      await deleteDataFromFirestore(vehicleIdToDelete);
      rl.close();
    } else {
      console.log("Pilihan tidak valid. Silakan coba lagi.");
      startProgram(); // Mengulangi pertanyaan jika pilihan tidak valid
    }
  }

  // Loop untuk input data
  async function inputLoop(rl) {
    while (true) {
      const vehicleId = await askQuestion("Masukkan ID kendaraan: ");

      // Menerima input dari pengguna dan mengkonversi ke tipe data yang sesuai
      const CO = parseFloat(await askQuestion("Masukkan CO: "));
      const NH4 = parseFloat(await askQuestion("Masukkan NH4: "));
      const NO2 = parseFloat(await askQuestion("Masukkan NO2: "));

      // Membuat objek data dengan update_time sebagai timestamp saat ini
      const data = {
        CO,
        NH4,
        NO2,
        update_time: new Date().toISOString(), // Menggunakan timestamp saat ini
      };

      // Tambahkan data ke Firestore
      await addDataToFirestore(vehicleId, data);

      // Menanyakan apakah ingin melanjutkan atau berhenti
      const continueInput = await askQuestion(
        "Apakah ingin melanjutkan input data? (Y/n): "
      );
      if (continueInput.toLowerCase() === "n") {
        console.log("Program berhenti.");
        rl.close();
        break;
      }
    }
  }

  // Memulai program
  startProgram();
}

// Memulai proses input
promptUserInput();
