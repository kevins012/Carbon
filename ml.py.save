U      uort
du'
    new_domain = 'xyz.e
du'
6666    new_domain = 'xyz. v

def contains_domain(address, domain):
    """Returns True if the email address contains the given domain in the domain position, false if not."""
    domain_pattern = r'[\w\.-]+@' + re.escape(domain) + r'$'
    return bool(re.match(domain_pattern, address))

def replace_domain(address, old_domain, new_domain):
    """Replaces the old domain with the new domain in the received address."""
    old_domain_pattern = r'@' + re.escape(old_domain) + r'$'
  address = re.sub(old_domain_pattern, '@' + new_domain, address)
    return address

def main():
    """Processes the list of emails, replacing any instances of the old domain with the new domain."""
    old_domain = 'abc.edu'
    new_domain = 'xyz.edu'
    csv_file_location = 'user_emails.csv'  # Set your CSV file location here
    report_file = '/data' + '/updated_user_emails.csv'
    
    user_email_list = []
    old_domain_email_list = []
    new_domain_email_list = []

    with open(csv_file_location, 'r') as f:
        user_data_list = list(csv.reader(f))
        user_email_list = [data[1].strip() for data in user_data_list[1:]]

        for email_address in user_email_list:
            if contains_domain(email_address, old_domain):
                old_domain_email_list.append(email_address)
                replaced_email = replace_domain(email_address, old_domain, new_domain)
                new_domain_email_list.append(replaced_email)

        email_key = 'Email Address'
        email_index = user_data_list[0].index(email_key)

        for user in user_data_list[1:]:
            for old_email, new_email in zip(old_domain_email_list, new_domain_email_list):
                if user[email_index].strip() == old_email:
                    user[email_index] = new_email

    with open(report_file, 'w+', newline='') as output_file:
        writer = csv.writer(output_file)
        writer.writerows(user_data_list)

if __name__ == "__main__":
    main()
